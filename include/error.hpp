////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Author: Jarret Shook
//
// Module: tester.hpp
//
// Time-period:
//
// Dec 11, 2014: Version 1.0: Created
// Dec 11, 2014: Version 1.0: Last Updated
//
// Notes:
//
// Requirements: c++11
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef __ERROR_HPP__
#define __ERROR_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <stdexcept>
#include <string>
#include <vector>

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev9 {
    
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class error
{
   public:  // Constructor | Destructor
   
      error(const char* const error) { _ctor(error); }
      error(std::string& error) { _ctor(error); }
    
      error(error& rhs) { _ctor(rhs._m_error); }
    
      ~error() { _dtor(); }
    
   public:  // Public Member Functions
        
      void print() { _print(); }
        
   private: // Private Member Functions
   
      void _ctor(const char* const error)
      {
         std::string temp_error = error;
         
         _ctor(temp_error);
      }
   
      void _dtor()
      {
         
      }
   
      void _ctor(std::string& error)
      {
         _m_error = error;
      }
   
      void _print()
      {
         std::cout << _m_error << std::endl;
      }
    
   private: // Member Variables
    
      std::string _m_error;
    
}; // end of class(error)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // end of namespace(ev9)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // __ERROR_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////